import {combine, createEffect, createEvent, createStore, sample} from 'effector';
import {fetchRepoByNameFx} from "@features/repositories/RepositoryDetails/model/api";

// üîπ –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
export const fetchRepositoriesFx = createEffect(async ({ query = 'stars:>1', page = 1, perPage = 3 }) => {
  const params = new URLSearchParams({
    q: query,
    page: String(page),
    per_page: String(perPage),
    sort: 'stars',
  });

  const res = await fetch(`https://api.github.com/search/repositories?${params.toString()}`);
  if (!res.ok) throw new Error('Failed to fetch repositories');
  return await res.json();
});


export const $isRepositoriesFetchError = createStore(false)
  .on(fetchRepoByNameFx.fail, () => true)
  .on(fetchRepoByNameFx, () => false)


// üîπ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
export const $repositories = createStore(null)
  .on(fetchRepositoriesFx.doneData, (_, payload) => payload);

export const $totalCount = createStore(0)
  .on(fetchRepositoriesFx.doneData, (_, payload) => payload.total_count);

// --- –°—Ç–µ–π—Ç—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const changeQuery = createEvent();
export const changePage = createEvent();
export const changePerPage = createEvent();

export const $query = createStore('react')
  .on(changeQuery, (_, q) => q);

export const $page = createStore(1)
  .on(changePage, (_, val) => val)
  .on(changeQuery, () => 1);

export const $perPage = createStore(3).on(changePerPage, (_, val) => val);

// --- –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–∏–Ω —Å—Ç–æ—Ä
const $params = combine({ query: $query, page: $page, perPage: $perPage });

// --- –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
sample({
  source: $params,
  target: fetchRepositoriesFx,
});

// üîπ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–≥—Ä—É–∑–∫–∏
export const $isRepositoriesLoading = fetchRepositoriesFx.pending;